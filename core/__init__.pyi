from typing import Dict, Optional, Any, List, Callable, Protocol

class ProgressCallback(Protocol):
    def __call__(self, stage: str, progress: float, status: str) -> None: ...

def get_storage_paths(space_id: str) -> Dict[str, str]: ...

def process_space(
    url: str,
    storage_root: str,
    progress_callback: Optional[ProgressCallback] = None,
    download_callback: Optional[Callable] = None
) -> Optional[Dict[str, str]]: ...

def get_space_id(url: str) -> str: ...

def regenerate_quotes(
    transcript_path: str,
    quotes_path: str,
    url: str
) -> List[str]: ...

def get_process_state(storage_root: str, space_id: str) -> Dict[str, Any]: ...

def save_process_state(storage_root: str, space_id: str, state: Dict[str, Any]) -> None: ...

class ProcessLock:
    def __init__(self, storage_root: str, space_id: str, timeout: int = 3600) -> None: ...
    def __enter__(self) -> None: ...
    def __exit__(self, exc_type: Any, exc_val: Any, exc_tb: Any) -> None: ... 